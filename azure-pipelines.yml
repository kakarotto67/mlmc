# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '13d3a5da-9810-4864-b417-c2b2527baf2f'
  dockerHubRegistry: 'https://index.docker.io/v1'
  containerRegistry: 'mlmccontainers.azurecr.io'
  # Services
  mongoServiceRepository: 'mongo-service'
  rabbitServiceRepository: 'rabbit-service'
  operationServiceRepository: 'operation-service'
  mgccServiceRepository: 'mgcc-service'
  webspaClientRepository: 'webspa-client'
  # Dockerfiles of the services
  operationServiceDockerfilePath: 'src/Services/Operation/Dockerfile'
  mgccServiceDockerfilePath: 'src/Services/MGCC.Api/Dockerfile'
  webspaClientDockerfilePath: 'src/Services/MGCC.Api/Dockerfile'

  tag: '$(Build.BuildId)'
  imagePullSecret: 'mlmccontainers69999e3a-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
# Deploy MongoDB and RabbitMQ
- stage: DeployInfrastructure
  displayName: Deploy stage
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'kakarotto67mlmc-6929.mlmc'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy MongoDB to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/mongo-deployment.yml
                $(Pipeline.Workspace)/manifests/mongo-service.yml
              containers: |
                mongo

          - task: KubernetesManifest@0
            displayName: Deploy RabbitMQ to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/rabbit-deployment.yml
                $(Pipeline.Workspace)/manifests/rabbit-service.yml
              containers: |
                rabbitmq:3-management


# Build Operation Service Image
- stage: BuildOperationService
  displayName: Build stage
  dependsOn: DeployInfrastructure
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(operationServiceRepository)
        dockerfile: $(operationServiceDockerfilePath)
        buildContext: '.'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests
# Deploy Operation Service Image
- stage: DeployOperationService
  displayName: Deploy stage
  dependsOn: BuildOperationService
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'kakarotto67mlmc-6929.mlmc'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/operation-deployment.yml
                $(Pipeline.Workspace)/manifests/operation-service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(operationServiceRepository):$(tag)


# Build MGCC Service Image
- stage: BuildMGCCService
  displayName: Build stage
  dependsOn: DeployOperationService
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(mgccServiceRepository)
        dockerfile: $(mgccServiceDockerfilePath)
        buildContext: '.'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests
# Deploy MGCC Service Image
- stage: DeployMGCCService
  displayName: Deploy stage
  dependsOn: BuildMGCCService
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'kakarotto67mlmc-6929.mlmc'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/mgcc-deployment.yml
                $(Pipeline.Workspace)/manifests/mgcc-service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(mgccServiceRepository):$(tag)


# Build WebSpa Client Image
- stage: BuildWebSpaService
  displayName: Build stage
  dependsOn: DeployMGCCService
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(webspaClientRepository)
        dockerfile: $(webspaClientDockerfilePath)
        buildContext: '.'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests
# Deploy WebSpa Client Image
- stage: DeployWebSpaService
  displayName: Deploy stage
  dependsOn: BuildWebSpaService
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'kakarotto67mlmc-6929.mlmc'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/webspa-deployment.yml
                $(Pipeline.Workspace)/manifests/webspa-service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(webspaClientRepository):$(tag)